'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

//import sinon from 'sinon';
//import Bootstrap from 'appium-android-bootstrap';

var _2 = require('../../..');

var _3 = _interopRequireDefault(_2);

//import { SUPPORTED_PERFORMANCE_DATA_TYPES } from '../../../lib/commands/performance.js';//,CPU_KEYS,

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumTestSupport = require('appium-test-support');

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var NETWORK_KEYS = [['bucketStart', 'activeTime', 'rxBytes', 'rxPackets', 'txBytes', 'txPackets', 'operations', 'bucketDuration'], ["st", "activeTime", "rb", "rp", "tb", "tp", "op", "bucketDuration"]];
var CPU_KEYS = ["user", "kernel"];
var BATTERY_KEYS = ["power"];
var MEMORY_KEYS = ["totalPrivateDirty", "nativePrivateDirty", "dalvikPrivateDirty", "eglPrivateDirty", "glPrivateDirty", "totalPss", "nativePss", "dalvikPss", "eglPss", "glPss", "nativeHeapAllocatedSize", "nativeHeapSize"];

var SUPPORTED_PERFORMANCE_DATA_TYPES = {
  cpuinfo: 'the amount of cpu by user and kernel process - cpu information for applications on real devices and simulators',
  memoryinfo: 'the amount of memory used by the process - memory information for applications on real devices and simulators',
  batteryinfo: 'the remaining battery power - battery power information for applications on real devices and simulators',
  networkinfo: 'the network statistics - network rx/tx information for applications on real devices and simulators'
};

describe('getperformancedata', function () {
  var adb = new _appiumAdb2['default']();
  var driver = new _3['default']();
  driver.adb = adb;

  describe('performance', (0, _appiumTestSupport.withMocks)({ driver: driver, adb: adb }, function (mocks) {
    it('should get the list of available getPerformance data type', function () {
      var returnValue = _lodash2['default'].keys(SUPPORTED_PERFORMANCE_DATA_TYPES);
      mocks.driver.expects('getPerformanceDataTypes').withExactArgs().returns(returnValue);
      var capability = driver.getPerformanceDataTypes();
      capability.should.eql(_lodash2['default'].keys(SUPPORTED_PERFORMANCE_DATA_TYPES));
    });
    it('should get the amount of cpu by user and kernel process', function () {
      var returnValue = [['user', 'kernel'], [0.9, 1.3]];
      mocks.driver.expects('getPerformanceData').withExactArgs('io.appium.android.apis', 'cpuinfo', 1000).returns(returnValue);
      var cpu = driver.getPerformanceData('io.appium.android.apis', 'cpuinfo', 1000);
      cpu.length.should.be.above(0);
      cpu[0].should.eql(CPU_KEYS);
      if (cpu.length > 1) {
        for (var i = 1; i < cpu.length; ++i) {
          cpu[0].length.should.equal(cpu[i].length);
        }
      }
    });
    it('should get the amount of memory used by the process', function () {
      var returnValue = [['totalPrivateDirty', 'nativePrivateDirty', 'dalvikPrivateDirty', 'eglPrivateDirty', 'glPrivateDirty', 'totalPss', 'nativePss', 'dalvikPss', 'eglPss', 'glPss', 'nativeHeapAllocatedSize', 'nativeHeapSize'], [18360, 8296, 6132, null, null, 42588, 8406, 7024, null, null, 26519, 10344]];
      mocks.driver.expects('getPerformanceData').withExactArgs('io.appium.android.apis', 'memoryinfo', 1000).returns(returnValue);
      var memory = driver.getPerformanceData('io.appium.android.apis', 'memoryinfo', 1000);
      memory.length.should.be.above(0);
      memory[0].should.eql(MEMORY_KEYS);
      if (memory.length > 1) {
        for (var i = 1; i < memory.length; ++i) {
          memory[0].length.should.equal(memory[i].length);
        }
      }
    });
    it('should get the remaining battery power', function () {
      var returnValue = [['power'], [23]];
      mocks.driver.expects('getPerformanceData').withExactArgs('io.appium.android.apis', 'batteryinfo', 1000).returns(returnValue);
      var battery = driver.getPerformanceData('io.appium.android.apis', 'batteryinfo', 1000);
      battery.length.should.be.above(0);
      battery[0].should.eql(BATTERY_KEYS);
      if (battery.length > 1) {
        for (var i = 1; i < battery.length; ++i) {
          battery[0].length.should.equal(battery[i].length);
        }
      }
    });
    it('should get the network statistics', function () {
      var returnValue = [['bucketStart', 'activeTime', 'rxBytes', 'rxPackets', 'txBytes', 'txPackets', 'operations', 'bucketDuration'], [1478091600000, 1099075, 610947, 928, 114362, 769, 0, 3600000], [1478095200000, 1306300, 405997, 509, 46359, 370, 0, 3600000]];
      mocks.driver.expects('getPerformanceData').withExactArgs('io.appium.android.apis', 'networkinfo', 1000).returns(returnValue);
      var network = driver.getPerformanceData('io.appium.android.apis', 'networkinfo', 1000);
      network.length.should.be.above(0);
      var compare = false;

      for (var j = 0; j < NETWORK_KEYS.length; ++j) {
        if (_lodash2['default'].isEqual(NETWORK_KEYS[j], network[0])) {
          compare = true;
        }
      }

      compare.should.equal(true);

      if (network.length > 1) {
        for (var i = 1; i < network.length; ++i) {
          network[0].length.should.equal(network[i].length);
        }
      }
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
